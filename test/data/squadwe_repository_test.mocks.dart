// Mocks generated by Mockito 5.0.15 from annotations
// in squadwe_client_sdk/test/data/squadwe_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i11;

import 'package:async/async.dart' as _i18;
import 'package:squadwe_client_sdk/squadwe_callbacks.dart' as _i16;
import 'package:squadwe_client_sdk/data/local/dao/squadwe_contact_dao.dart'
    as _i4;
import 'package:squadwe_client_sdk/data/local/dao/squadwe_conversation_dao.dart'
    as _i3;
import 'package:squadwe_client_sdk/data/local/dao/squadwe_messages_dao.dart'
    as _i5;
import 'package:squadwe_client_sdk/data/local/dao/squadwe_user_dao.dart'
    as _i2;
import 'package:squadwe_client_sdk/data/local/entity/squadwe_contact.dart'
    as _i6;
import 'package:squadwe_client_sdk/data/local/entity/squadwe_conversation.dart'
    as _i13;
import 'package:squadwe_client_sdk/data/local/entity/squadwe_message.dart'
    as _i7;
import 'package:squadwe_client_sdk/data/local/local_storage.dart' as _i10;
import 'package:squadwe_client_sdk/data/remote/squadwe_client_exception.dart'
    as _i17;
import 'package:squadwe_client_sdk/data/remote/requests/squadwe_action_data.dart'
    as _i15;
import 'package:squadwe_client_sdk/data/remote/requests/squadwe_new_message_request.dart'
    as _i14;
import 'package:squadwe_client_sdk/data/remote/service/squadwe_client_service.dart'
    as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stream_channel/stream_channel.dart' as _i9;
import 'package:web_socket_channel/web_socket_channel.dart' as _i8;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeSquadweUserDao_0 extends _i1.Fake implements _i2.SquadweUserDao {}

class _FakeSquadweConversationDao_1 extends _i1.Fake
    implements _i3.SquadweConversationDao {}

class _FakeSquadweContactDao_2 extends _i1.Fake
    implements _i4.SquadweContactDao {}

class _FakeSquadweMessagesDao_3 extends _i1.Fake
    implements _i5.SquadweMessagesDao {}

class _FakeSquadweContact_4 extends _i1.Fake implements _i6.SquadweContact {}

class _FakeSquadweMessage_5 extends _i1.Fake implements _i7.SquadweMessage {}

class _FakeWebSocketSink_6 extends _i1.Fake implements _i8.WebSocketSink {}

class _FakeStreamChannel_7<T> extends _i1.Fake implements _i9.StreamChannel<T> {
}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i10.LocalStorage {
  MockLocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SquadweUserDao get userDao =>
      (super.noSuchMethod(Invocation.getter(#userDao),
          returnValue: _FakeSquadweUserDao_0()) as _i2.SquadweUserDao);
  @override
  set userDao(_i2.SquadweUserDao? _userDao) =>
      super.noSuchMethod(Invocation.setter(#userDao, _userDao),
          returnValueForMissingStub: null);
  @override
  _i3.SquadweConversationDao get conversationDao =>
      (super.noSuchMethod(Invocation.getter(#conversationDao),
              returnValue: _FakeSquadweConversationDao_1())
          as _i3.SquadweConversationDao);
  @override
  set conversationDao(_i3.SquadweConversationDao? _conversationDao) =>
      super.noSuchMethod(Invocation.setter(#conversationDao, _conversationDao),
          returnValueForMissingStub: null);
  @override
  _i4.SquadweContactDao get contactDao =>
      (super.noSuchMethod(Invocation.getter(#contactDao),
          returnValue: _FakeSquadweContactDao_2()) as _i4.SquadweContactDao);
  @override
  set contactDao(_i4.SquadweContactDao? _contactDao) =>
      super.noSuchMethod(Invocation.setter(#contactDao, _contactDao),
          returnValueForMissingStub: null);
  @override
  _i5.SquadweMessagesDao get messagesDao => (super.noSuchMethod(
      Invocation.getter(#messagesDao),
      returnValue: _FakeSquadweMessagesDao_3()) as _i5.SquadweMessagesDao);
  @override
  set messagesDao(_i5.SquadweMessagesDao? _messagesDao) =>
      super.noSuchMethod(Invocation.setter(#messagesDao, _messagesDao),
          returnValueForMissingStub: null);
  @override
  _i11.Future<void> clear({bool? clearSquadweUserStorage = true}) =>
      (super.noSuchMethod(
              Invocation.method(#clear, [],
                  {#clearSquadweUserStorage: clearSquadweUserStorage}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i11.Future<void>);
  @override
  _i11.Future<void> clearAll() => (super.noSuchMethod(
      Invocation.method(#clearAll, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i11.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SquadweClientService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSquadweClientService extends _i1.Mock
    implements _i12.SquadweClientService {
  MockSquadweClientService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set connection(_i8.WebSocketChannel? _connection) =>
      super.noSuchMethod(Invocation.setter(#connection, _connection),
          returnValueForMissingStub: null);
  @override
  _i11.Future<_i6.SquadweContact> updateContact(dynamic update) =>
      (super.noSuchMethod(Invocation.method(#updateContact, [update]),
              returnValue:
                  Future<_i6.SquadweContact>.value(_FakeSquadweContact_4()))
          as _i11.Future<_i6.SquadweContact>);
  @override
  _i11.Future<_i6.SquadweContact> getContact() =>
      (super.noSuchMethod(Invocation.method(#getContact, []),
              returnValue:
                  Future<_i6.SquadweContact>.value(_FakeSquadweContact_4()))
          as _i11.Future<_i6.SquadweContact>);
  @override
  _i11.Future<List<_i13.SquadweConversation>> getConversations() =>
      (super.noSuchMethod(Invocation.method(#getConversations, []),
              returnValue: Future<List<_i13.SquadweConversation>>.value(
                  <_i13.SquadweConversation>[]))
          as _i11.Future<List<_i13.SquadweConversation>>);
  @override
  _i11.Future<_i7.SquadweMessage> createMessage(
          _i14.SquadweNewMessageRequest? request) =>
      (super.noSuchMethod(Invocation.method(#createMessage, [request]),
              returnValue:
                  Future<_i7.SquadweMessage>.value(_FakeSquadweMessage_5()))
          as _i11.Future<_i7.SquadweMessage>);
  @override
  _i11.Future<_i7.SquadweMessage> updateMessage(
          String? messageIdentifier, dynamic update) =>
      (super.noSuchMethod(
              Invocation.method(#updateMessage, [messageIdentifier, update]),
              returnValue:
                  Future<_i7.SquadweMessage>.value(_FakeSquadweMessage_5()))
          as _i11.Future<_i7.SquadweMessage>);
  @override
  _i11.Future<List<_i7.SquadweMessage>> getAllMessages() =>
      (super.noSuchMethod(Invocation.method(#getAllMessages, []),
              returnValue: Future<List<_i7.SquadweMessage>>.value(
                  <_i7.SquadweMessage>[]))
          as _i11.Future<List<_i7.SquadweMessage>>);
  @override
  void startWebSocketConnection(String? contactPubsubToken,
          {_i8.WebSocketChannel Function(Uri)? onStartConnection}) =>
      super.noSuchMethod(
          Invocation.method(#startWebSocketConnection, [contactPubsubToken],
              {#onStartConnection: onStartConnection}),
          returnValueForMissingStub: null);
  @override
  void sendAction(
          String? contactPubsubToken, _i15.SquadweActionType? action) =>
      super.noSuchMethod(
          Invocation.method(#sendAction, [contactPubsubToken, action]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SquadweCallbacks].
///
/// See the documentation for Mockito's code generation for more information.
class MockSquadweCallbacks extends _i1.Mock implements _i16.SquadweCallbacks {
  MockSquadweCallbacks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onWelcome(void Function()? _onWelcome) =>
      super.noSuchMethod(Invocation.setter(#onWelcome, _onWelcome),
          returnValueForMissingStub: null);
  @override
  set onPing(void Function()? _onPing) =>
      super.noSuchMethod(Invocation.setter(#onPing, _onPing),
          returnValueForMissingStub: null);
  @override
  set onConfirmedSubscription(void Function()? _onConfirmedSubscription) =>
      super.noSuchMethod(
          Invocation.setter(#onConfirmedSubscription, _onConfirmedSubscription),
          returnValueForMissingStub: null);
  @override
  set onConversationStartedTyping(
          void Function()? _onConversationStartedTyping) =>
      super.noSuchMethod(
          Invocation.setter(
              #onConversationStartedTyping, _onConversationStartedTyping),
          returnValueForMissingStub: null);
  @override
  set onConversationIsOnline(void Function()? _onConversationIsOnline) =>
      super.noSuchMethod(
          Invocation.setter(#onConversationIsOnline, _onConversationIsOnline),
          returnValueForMissingStub: null);
  @override
  set onConversationIsOffline(void Function()? _onConversationIsOffline) =>
      super.noSuchMethod(
          Invocation.setter(#onConversationIsOffline, _onConversationIsOffline),
          returnValueForMissingStub: null);
  @override
  set onConversationStoppedTyping(
          void Function()? _onConversationStoppedTyping) =>
      super.noSuchMethod(
          Invocation.setter(
              #onConversationStoppedTyping, _onConversationStoppedTyping),
          returnValueForMissingStub: null);
  @override
  set onMessageReceived(
          void Function(_i7.SquadweMessage)? _onMessageReceived) =>
      super.noSuchMethod(
          Invocation.setter(#onMessageReceived, _onMessageReceived),
          returnValueForMissingStub: null);
  @override
  set onMessageUpdated(void Function(_i7.SquadweMessage)? _onMessageUpdated) =>
      super.noSuchMethod(
          Invocation.setter(#onMessageUpdated, _onMessageUpdated),
          returnValueForMissingStub: null);
  @override
  set onMessageSent(
          void Function(_i7.SquadweMessage, String)? _onMessageSent) =>
      super.noSuchMethod(Invocation.setter(#onMessageSent, _onMessageSent),
          returnValueForMissingStub: null);
  @override
  set onMessageDelivered(
          void Function(_i7.SquadweMessage, String)? _onMessageDelivered) =>
      super.noSuchMethod(
          Invocation.setter(#onMessageDelivered, _onMessageDelivered),
          returnValueForMissingStub: null);
  @override
  set onPersistedMessagesRetrieved(
          void Function(List<_i7.SquadweMessage>)?
              _onPersistedMessagesRetrieved) =>
      super.noSuchMethod(
          Invocation.setter(
              #onPersistedMessagesRetrieved, _onPersistedMessagesRetrieved),
          returnValueForMissingStub: null);
  @override
  set onMessagesRetrieved(
          void Function(List<_i7.SquadweMessage>)? _onMessagesRetrieved) =>
      super.noSuchMethod(
          Invocation.setter(#onMessagesRetrieved, _onMessagesRetrieved),
          returnValueForMissingStub: null);
  @override
  set onConversationResolved(void Function()? _onConversationResolved) =>
      super.noSuchMethod(
          Invocation.setter(#onConversationResolved, _onConversationResolved),
          returnValueForMissingStub: null);
  @override
  set onError(void Function(_i17.SquadweClientException)? _onError) =>
      super.noSuchMethod(Invocation.setter(#onError, _onError),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [WebSocketChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocketChannel extends _i1.Mock implements _i8.WebSocketChannel {
  MockWebSocketChannel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Stream<dynamic> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
          returnValue: Stream<dynamic>.empty()) as _i11.Stream<dynamic>);
  @override
  _i8.WebSocketSink get sink => (super.noSuchMethod(Invocation.getter(#sink),
      returnValue: _FakeWebSocketSink_6()) as _i8.WebSocketSink);
  @override
  void pipe(_i9.StreamChannel<dynamic>? other) =>
      super.noSuchMethod(Invocation.method(#pipe, [other]),
          returnValueForMissingStub: null);
  @override
  _i9.StreamChannel<S> transform<S>(
          _i9.StreamChannelTransformer<S, dynamic>? transformer) =>
      (super.noSuchMethod(Invocation.method(#transform, [transformer]),
          returnValue: _FakeStreamChannel_7<S>()) as _i9.StreamChannel<S>);
  @override
  _i9.StreamChannel<dynamic> transformStream(
          _i11.StreamTransformer<dynamic, dynamic>? transformer) =>
      (super.noSuchMethod(Invocation.method(#transformStream, [transformer]),
              returnValue: _FakeStreamChannel_7<dynamic>())
          as _i9.StreamChannel<dynamic>);
  @override
  _i9.StreamChannel<dynamic> transformSink(
          _i18.StreamSinkTransformer<dynamic, dynamic>? transformer) =>
      (super.noSuchMethod(Invocation.method(#transformSink, [transformer]),
              returnValue: _FakeStreamChannel_7<dynamic>())
          as _i9.StreamChannel<dynamic>);
  @override
  _i9.StreamChannel<dynamic> changeStream(
          _i11.Stream<dynamic> Function(_i11.Stream<dynamic>)? change) =>
      (super.noSuchMethod(Invocation.method(#changeStream, [change]),
              returnValue: _FakeStreamChannel_7<dynamic>())
          as _i9.StreamChannel<dynamic>);
  @override
  _i9.StreamChannel<dynamic> changeSink(
          _i11.StreamSink<dynamic> Function(_i11.StreamSink<dynamic>)?
              change) =>
      (super.noSuchMethod(Invocation.method(#changeSink, [change]),
              returnValue: _FakeStreamChannel_7<dynamic>())
          as _i9.StreamChannel<dynamic>);
  @override
  _i9.StreamChannel<S> cast<S>() =>
      (super.noSuchMethod(Invocation.method(#cast, []),
          returnValue: _FakeStreamChannel_7<S>()) as _i9.StreamChannel<S>);
  @override
  String toString() => super.toString();
}
